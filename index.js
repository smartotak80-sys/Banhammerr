require("dotenv").config();
const { 
    Client, 
    GatewayIntentBits, 
    Partials, 
    EmbedBuilder, 
    ButtonBuilder, 
    ActionRowBuilder, 
    ButtonStyle, 
    Events, 
    ModalBuilder, 
    TextInputBuilder, 
    TextInputStyle 
} = require("discord.js");

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.DirectMessages
    ],
    partials: [Partials.Channel]
});

// –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É
const applicationButton = new ButtonBuilder()
    .setCustomId("apply")
    .setLabel("–ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É")
    .setStyle(ButtonStyle.Success)
    .setEmoji("‚úâÔ∏è"); // –º–∞–ª–µ–Ω—å–∫–∏–π –∫–æ–Ω–≤–µ—Ä—Ç

client.once("ready", async () => {
    console.log(`‚úÖ –£–≤—ñ–π—à–æ–≤ —è–∫ ${client.user.tag}`);
    
    const channel = await client.channels.fetch(process.env.APPLICATION_CHANNEL_ID);
    if (!channel) return console.log("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—å –∑–Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª");

    const embed = new EmbedBuilder()
        .setTitle("üì¢ –í–Ü–î–ö–†–ò–¢–û –ü–û–î–ê–ù–ù–Ø –ó–ê–Ø–í–û–ö")
        .setDescription(
            "–í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É.\n\n" +
            "–ü—ñ—Å–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ —Ç–∞ —ó—ó —Ä–æ–∑–≥–ª—è–¥—É –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ **–æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è** –≤—ñ–¥ –ë–æ—Ç–∞ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ—Ç—è–≥–æ–º **2‚Äì5 –¥–Ω—ñ–≤**.\n" +
            "‚ö†Ô∏è –í—ñ–¥–ø–æ–≤—ñ–¥—å –º–æ–∂–µ –Ω–µ –Ω–∞–¥—ñ–π—Ç–∏, —è–∫—â–æ —É –≤–∞—Å –∑–∞–∫—Ä–∏—Ç–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É Discord."
        )
        .setColor("#808080")
        .setFooter({ text: new Date().toLocaleString("uk-UA") });

    const row = new ActionRowBuilder().addComponents(applicationButton);
    await channel.send({ embeds: [embed], components: [row] });
});

client.on(Events.InteractionCreate, async (interaction) => {
    // ---------- –ö–ù–û–ü–ö–ê –ü–û–î–ê–ù–ù–Ø –ó–ê–Ø–í–ö–ò ----------
    if (interaction.isButton() && interaction.customId === "apply") {
        const modal = new ModalBuilder()
            .setCustomId('application_form')
            .setTitle('–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø');

        const discord = new TextInputBuilder()
            .setCustomId('discord')
            .setLabel('–û—Å–Ω–æ–≤–Ω–∏–π Discord')
            .setStyle(TextInputStyle.Short)
            .setRequired(true);

        const rlNameAge = new TextInputBuilder()
            .setCustomId('rlNameAge')
            .setLabel('RL –Ü–º‚Äô—è / RL –í—ñ–∫')
            .setStyle(TextInputStyle.Short)
            .setRequired(true);

        const online = new TextInputBuilder()
            .setCustomId('online')
            .setLabel('–©–æ–¥–µ–Ω–Ω–∏–π –æ–Ω–ª–∞–π–Ω / –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å')
            .setStyle(TextInputStyle.Short)
            .setRequired(true);

        const families = new TextInputBuilder()
            .setCustomId('families')
            .setLabel('–£ —è–∫–∏—Ö —Å—ñ–º‚Äô—è—Ö –±—É–ª–∏')
            .setStyle(TextInputStyle.Paragraph)
            .setRequired(true);

        const recoilVideo = new TextInputBuilder()
            .setCustomId('recoilVideo')
            .setLabel('–í—ñ–¥–µ–æ –≤—ñ–¥–∫–∞—Ç—É —Å—Ç—Ä—ñ–ª—å–±–∏ (YouTube)')
            .setStyle(TextInputStyle.Short)
            .setRequired(true);

        modal.addComponents(
            new ActionRowBuilder().addComponents(discord),
            new ActionRowBuilder().addComponents(rlNameAge),
            new ActionRowBuilder().addComponents(online),
            new ActionRowBuilder().addComponents(families),
            new ActionRowBuilder().addComponents(recoilVideo)
        );

        await interaction.showModal(modal);
        return;
    }

    // ---------- –ú–û–î–ê–õ –ü–û–î–ê–ù–ù–Ø –ó–ê–Ø–í–ö–ò ----------
    if (interaction.isModalSubmit() && interaction.customId === 'application_form') {
        const embed = new EmbedBuilder()
            .setTitle('üì• –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞')
            .addFields(
                { name: '–û—Å–Ω–æ–≤–Ω–∏–π Discord', value: interaction.fields.getTextInputValue('discord') },
                { name: 'RL –Ü–º‚Äô—è / RL –í—ñ–∫', value: interaction.fields.getTextInputValue('rlNameAge') },
                { name: '–©–æ–¥–µ–Ω–Ω–∏–π –æ–Ω–ª–∞–π–Ω / –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å', value: interaction.fields.getTextInputValue('online') },
                { name: '–£ —è–∫–∏—Ö —Å—ñ–º‚Äô—è—Ö –±—É–ª–∏', value: interaction.fields.getTextInputValue('families') },
                { name: '–í—ñ–¥–µ–æ –≤—ñ–¥–∫–∞—Ç—É —Å—Ç—Ä—ñ–ª—å–±–∏', value: interaction.fields.getTextInputValue('recoilVideo') }
            )
            .setColor("#808080")
            .setFooter({ text: `–í—ñ–¥ ${interaction.user.tag}` });

        const recruitChannel = await client.channels.fetch(process.env.RECRUIT_CHANNEL_ID);

        const decisionRow = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder().setCustomId(`accept_${interaction.user.id}`).setLabel('–ü—Ä–∏–π–Ω—è—Ç–∏').setStyle(ButtonStyle.Success),
                new ButtonBuilder().setCustomId(`decline_${interaction.user.id}`).setLabel('–í—ñ–¥–º–æ–≤–∏—Ç–∏').setStyle(ButtonStyle.Danger)
            );

        await recruitChannel.send({ embeds: [embed], components: [decisionRow] });
        await interaction.reply({ content: '‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞!', ephemeral: true });
        return;
    }

    // ---------- –ü–†–ò–ô–ù–Ø–¢–ò –ó–ê–Ø–í–ö–£ –ó –í–Ü–î–ü–û–í–Ü–î–î–Æ ----------
    if (interaction.isButton() && interaction.customId.startsWith('accept_')) {
        const userId = interaction.customId.split('_')[1];

        const modal = new ModalBuilder()
            .setCustomId(`accept_reason_${userId}`)
            .setTitle('–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–∞—è–≤–∫—É');

        const responseInput = new TextInputBuilder()
            .setCustomId('response')
            .setLabel('–ù–∞–ø–∏—à—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É')
            .setStyle(TextInputStyle.Paragraph)
            .setRequired(true);

        modal.addComponents(new ActionRowBuilder().addComponents(responseInput));
        await interaction.showModal(modal);
        return;
    }

    // ---------- –û–¢–†–ò–ú–ê–ù–ù–Ø –í–Ü–î–ü–û–í–Ü–î–Ü –ü–†–ò–ô–ù–Ø–¢–û–á –ó–ê–Ø–í–ö–ò ----------
    if (interaction.isModalSubmit() && interaction.customId.startsWith('accept_reason_')) {
        const userId = interaction.customId.split('_')[2];
        const user = await client.users.fetch(userId);

        const response = interaction.fields.getTextInputValue('response');
        await user.send(`‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–ª–∞ **–ø—Ä–∏–π–Ω—è—Ç–∞**.\n–í—ñ–¥–ø–æ–≤—ñ–¥—å: ${response}`);
        await interaction.update({ content: '–í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞!', components: [], embeds: interaction.message.embeds });
        return;
    }

    // ---------- –í–Ü–î–ú–û–í–ê –ó –ü–†–ò–ß–ò–ù–û–Æ ----------
    if (interaction.isButton() && interaction.customId.startsWith('decline_')) {
        const userId = interaction.customId.split('_')[1];

        const modal = new ModalBuilder()
            .setCustomId(`decline_reason_${userId}`)
            .setTitle('–ü—Ä–∏—á–∏–Ω–∞ –≤—ñ–¥–º–æ–≤–∏');

        const reasonInput = new TextInputBuilder()
            .setCustomId('reason')
            .setLabel('–ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É –≤—ñ–¥–º–æ–≤–∏')
            .setStyle(TextInputStyle.Paragraph)
            .setRequired(true);

        modal.addComponents(new ActionRowBuilder().addComponents(reasonInput));
        await interaction.showModal(modal);
        return;
    }

    // ---------- –û–¢–†–ò–ú–ê–ù–ù–Ø –ü–†–ò–ß–ò–ù–ò –í–Ü–î–ú–û–í–ò ----------
    if (interaction.isModalSubmit() && interaction.customId.startsWith('decline_reason_')) {
        const userId = interaction.customId.split('_')[2];
        const user = await client.users.fetch(userId);

        const reason = interaction.fields.getTextInputValue('reason');
        await user.send(`‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–ª–∞ **–≤—ñ–¥—Ö–∏–ª–µ–Ω–∞**.\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}`);
        await interaction.update({ content: '–ó–∞—è–≤–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞ –∑ –ø—Ä–∏—á–∏–Ω–æ—é!', components: [], embeds: interaction.message.embeds });
        return;
    }
});

client.login(process.env.DISCORD_TOKEN);
